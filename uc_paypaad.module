<?php
// $Id$

/**
 * @file
 * Contains necessary hook implementations, callbacks & helpers.
 */

/**
 * Implements hook_menu().
 */
function uc_paypaad_menu() {
  $items = array();

  $items['cart/paypaad/status/%'] = array(
    'title' => 'Order payment status',
    'page callback' => 'uc_paypaad_response',
    'page arguments' => array(3),
    'access callback' => 'uc_paypaad_access',
    'file' => 'uc_paypaad.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_payment_method().
 *
 * @todo Add option to display bank logo beside the name.
 */
function uc_paypaad_payment_method() {
  $methods = array();

  $methods[] = array(
    'id' => 'paypaad',
    'name' => t('Paypaad Payment'),
    'title' => t('Paypaad Payment'),
    'desc'  => t('Redirect to Pasargad bank paypaad gateway.'),
    'callback' => 'uc_paypaad_settings',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implements hook_form_alter() for uc_cart_checkout_review_form.
 *
 * Alters the order review form and injects required hidden fields,
 * also alteres its action attribute, addressing the Paypaad gateway.
 */
function uc_paypaad_form_uc_cart_checkout_review_form_alter(&$form, $form_state) {
  // Check order identifier.
  $order_id = intval($_SESSION['cart_order']);
  if ($order_id > 0 && ($order = uc_order_load($order_id))) {
    // Alter the form if the it's a Paypaad payment.
    if ($order->payment_method == 'paypaad') {
      // Prepare the order object in form of Paypaad compatible
      // arrays of invoice and products, then builds the XML and
      // signed output of these arrays using Paypaad Payment API
      // module. TODO: This should be moved to the API module.
      if ($content = _uc_paypaad_prepare($order)) {
        // Inject hidden fields.
        // TODO: This should be moved to API module as UI helper.
        // Inject XML invoice.
        $form['content'] = array(
          '#type' => 'hidden',
          '#value' => $content['xml'],
        );
        // Inject signed copy of XML invoice.
        $form['sign'] = array(
          '#type' => 'hidden',
          '#value' => $content['sign'],
        );
        // And update the form action.
        $form['#action'] = variable_get('uc_paypaad_controller_uri', PAYPAAD_CONTROLLER_URI);
      }
    }
  }
}

/**
 * Implements hook_form_alter() for uc_payment_methods_form.
 *
 * Attaches an aditional form validation callback.
 */
function uc_paypaad_form_uc_payment_methods_form_alter(&$form, $form_state) {
  $form['#validate'][] = 'uc_paypaad_settings_validate';
}

/**
 * Implements hook_ucga_display().
 *
 * @see http://api.ubercart.org/api/function/hook_ucga_display/2
 */
function uc_paypaad_ucga_display() {
  if (implode('/', arg()) == 'cart/paypaad/complete') {
    return TRUE;
  }
}

/**
 * Introduces Paypaad Payment settings form to Ubercart.
 */
function uc_paypaad_settings($op, &$arg1) {
  if ($op == 'settings') {
    $form = array();
    // Paypaad merchant code.
    $form['uc_paypaad_merchant'] = array(
      '#type' => 'textfield',
      '#title' => t('Merchant Code'),
      '#description' => t('Enter the merchant code provided by Pasargad Bank.'),
      '#default_value' => variable_get('uc_paypaad_merchant', ''),
      '#required' => TRUE,
    );
    // Paypaad terminal code.
    $form['uc_paypaad_terminal'] = array(
      '#type' => 'textfield',
      '#title' => t('Terminal Code'),
      '#description' => t('Enter the terminal code provided by Pasargad Bank.'),
      '#default_value' => variable_get('uc_paypaad_terminal', ''),
      '#required' => TRUE,
    );
    // Private PEM key path.
    $form['uc_paypaad_private_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Private key file'),
      '#description' => t('Accessible absolute system path to your private key PEM file.'),
      '#default_value' => variable_get('uc_paypaad_private_key', ''),
      '#required' => TRUE,
    );
    // Maximum product delivery days.
    $form['uc_paypaad_max_delivery_days'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum number of delivery days'),
      '#description' => t('Maximum number of days in which the product will be delivered to customer.'),
      '#default_value' => variable_get('uc_paypaad_max_delivery_days', ''),
      '#required' => TRUE,
    );
    // Paypaad gateway URIs.
    $form['additional'] = array(
      '#type' => 'fieldset',
      '#title' => t('Additional options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    // Paypaad gateway trace URI.
    $form['additional']['uc_paypaad_trace_uri'] = array(
      '#type' => 'textfield',
      '#title' => t('Paypaad gateway controller URI'),
      '#description' => t('Do not change the default value unless you checked that Paypaad docs and it has changed.'),
      '#default_value' => variable_get('uc_paypaad_trace_uri', PAYPAAD_TRACE_URI),
      '#required' => TRUE,
    );
    // Paypaad gateway controller URI.
    $form['additional']['uc_paypaad_controller_uri'] = array(
      '#type' => 'textfield',
      '#title' => t('Paypaad gateway controller URI'),
      '#description' => t('Do not change the default value unless you checked that Paypaad docs and it has changed.'),
      '#default_value' => variable_get('uc_paypaad_controller_uri', PAYPAAD_CONTROLLER_URI),
      '#required' => TRUE,
    );

    return $form;
  }
}

/**
 * Form validation callback for settings form.
 */
function uc_paypaad_settings_validate($form, &$form_state) {
  // Check merchant code for a 9-digit number.
  if (!ctype_digit($form_state['values']['uc_paypaad_merchant']) || !isset($form_state['values']['uc_paypaad_merchant'][8])) {
    form_set_error('uc_paypaad_merchant', t('Paypaad merchant code must be a 9-digit numeric value.'));
  }
  // Check terminal code for a 10-digit number.
  if (!ctype_digit($form_state['values']['uc_paypaad_terminal']) || !isset($form_state['values']['uc_paypaad_terminal'][9])) {
    form_set_error('uc_paypaad_terminal', t('Paypaad terminal code must be a 10-digit numeric value.'));
  }
  // Check delivery days for a positive number.
  if (!ctype_digit($form_state['values']['uc_paypaad_max_delivery_days'])) {
    form_set_error('uc_paypaad_max_delivery_days', t('Maximum delivery days must be a positive number.'));
  }
  // Check private key file path.
  if (!is_readable($form_state['values']['uc_paypaad_private_key'])) {
    form_set_error('uc_paypaad_private_key', t('Private key file is not a valid readable file.'));
  }
  // Check gateway trace URL.
  if (!valid_url($form_state['values']['uc_paypaad_trace_uri'], TRUE)) {
    form_set_error('uc_paypaad_trace_uri', t('Paypaad gateway trace URI must be a valid URL.'));
  }
  // Check gateway controller URL.
  if (!valid_url($form_state['values']['uc_paypaad_controller_uri'], TRUE)) {
    form_set_error('uc_paypaad_controller_uri', t('Paypaad gateway controller URI must be a valid URL.'));
  }
}

/**
 * Menu paths access callback.
 *
 * Ensures a free access to defined paths.
 */
function uc_paypaad_access() {
  return TRUE;
}

/**
 * Internal helper that build Paypaad compatible data out of an Ubercart order object.
 *
 * @param $order
 *   Ubercart order object.
 *
 * @return
 *   Either an array of invoice XML representation
 *   and its signed copy or FALSE on operation failure.
 *
 * @todo
 *   Move to API module as a UC API Helper.
 */
function _uc_paypaad_prepare(&$order) {
  // Partially check requirements.
  if (!is_object($order)) {
    return FALSE;
  }

  // Set base path for response page.
  global $base_root;
  $response_path = $base_root . url('cart/paypaad/status');
  // Build content array out of the $order.
  $content = array(
    'items' => array(),
    'invoice_number' => $order->order_id,
    'buyer_tel' => $order->billing_phone,
    'total_amount' => $order->order_total,
    'merchant_code'  => variable_get('uc_paypaad_merchant', ''),
    'terminal_code'  => variable_get('uc_paypaad_terminal', ''),
    'delivery_days' => variable_get('uc_paypaad_max_delivery_days', 1),
    'buyer_name' => $order->billing_first_name . ' ' . $order->billing_last_name,
    'delivery_address' => str_replace('<br />', ' - ', uc_order_address($order, 'billing')),
    'redirect_address' => $response_path . '/success',
    'referer_address'  => $response_path . '/failure',
  );
  // Build items (products) array.
  foreach ($order->products as $index => $product) {
    $content['items'][] = array(
      'fee' => $product->price,
      'count' => $product->qty,
      'number' => (int) $index + 1,
      'content' => $product->title,
      'amount' => intval($product->qty) * intval($product->price),
      'description' => $product->qty . ' x ' . $product->price . ' - ' . $product->title,
    );
  }
  // And also their XML representation.
  if ($content = paypaad_xml($content, array(), TRUE)) {
    // Then the signature. "file://" make openssl_pkey_get_private() understand that it's a path.
    if ($sign = paypaad_sign($content, 'file://' . variable_get('uc_paypaad_private_key', ''))) {
      // Return an array of content & signature.
      return array(
        'sign' => $sign,
        'xml'  => $content,
      );
    }
  }
  // Failure.
  return FALSE;
}

