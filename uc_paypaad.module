<?php

/**
 * @file
 * Contains necessary hook implementations, callbacks & helpers.
 */

/**
 * Implements hook_menu().
 */
function uc_paypaad_menu() {
  $items = array();

  $items['cart/paypaad/%'] = array(
    'title' => 'Order payment status',
    'page callback' => 'uc_paypaad_response',
    'page arguments' => array(2),
    'access callback' => 'uc_paypaad_access',
    'file' => 'uc_paypaad.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_payment_method().
 */
function uc_paypaad_payment_method() {
  $methods = array();

  $methods[] = array(
    'id' => 'paypaad',
    'name' => t('Paypaad Payment'),
    'title' => t('Paypaad Payment'),
    'desc'  => t('Redirect to Pasargad bank paypaad gateway.'),
    'callback' => 'uc_paypaad_settings',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implements hook_form_alter() for uc_cart_checkout_review_form.
 *
 * Alters the order review form and injects required hidden fields,
 * also alteres its action attribute, addressing the Paypaad gateway.
 *
 * @see _uc_paypaad_prepare()
 * @see paypaad_hidden_fields()
 */
function uc_paypaad_form_uc_cart_checkout_review_form_alter(&$form, $form_state) {
  // Check order identifier.
  $order_id = intval($_SESSION['cart_order']);
  if ($order_id > 0 && ($order = uc_order_load($order_id))) {
    // Alter the form if it's a Paypaad payment.
    if ($order->payment_method == 'paypaad') {
      // Prepare the order object in form of Paypaad compatible
      // arrays of invoice and products, then build the XML and
      // sign its copy using user provided private key.
      if (list($content, $sign) = _uc_paypaad_prepare($order)) {
        // Inject hidden fields.
        paypaad_hidden_fields($content, $sign, $form);
        // And update the form action.
        $form['#action'] = paypaad_settings('controller_uri', 'uc', PAYPAAD_CONTROLLER_URI);
      }
      // Problems!
      else {
        // Notify customer.
        drupal_set_message(t('There were a problem preparing your order for Paypaad payment. If possible, choose another payment method or try again later.'), 'error');
        // Notify the dog!
        watchdog(
          'uc_paypaad',
          'There were a problem preparing the order ID %order for Paypaad payment.',
          array('%order' => $order->order_id),
          WATCHDOG_ERROR
        );
        // And return to checkout page.
        drupal_goto('cart/checkout');
      }
    }
  }
}

/**
 * Implements hook_form_alter() for uc_payment_methods_form.
 *
 * Attaches an aditional form validation callback.
 *
 * @see uc_paypaad_settings_validate()
 */
function uc_paypaad_form_uc_payment_methods_form_alter(&$form, $form_state) {
  $form['#validate'][] = 'uc_paypaad_settings_validate';
}

/**
 * Implements hook_ucga_display().
 *
 * @see http://api.ubercart.org/api/function/hook_ucga_display/2
 */
function uc_paypaad_ucga_display() {
  if (implode('/', arg()) == 'cart/paypaad/success') {
    return TRUE;
  }
}

/**
 * Introduces Paypaad Payment settings form to Ubercart.
 *
 * @see paypaad_settings_fields()
 */
function uc_paypaad_settings($op, &$arg1) {
  if ($op == 'settings') {
    $form = array();
    return paypaad_settings_fields($form, 'uc');
  }
}

/**
 * Form validation callback for settings form.
 *
 * Actually it's a wrapper to Paypaad Payment API's field validation helper.
 *
 * @see paypaad_settings_fields_validate()
 */
function uc_paypaad_settings_validate($form, &$form_state) {
  paypaad_settings_fields_validate($form, $form_state, 'uc');
}

/**
 * Menu paths access callback.
 *
 * Ensures a free access to defined paths.
 */
function uc_paypaad_access() {
  return TRUE;
}

/**
 * Internal helper that build Paypaad compatible data out of an Ubercart order object.
 *
 * @param $order
 *   Ubercart order object.
 *
 * @return
 *   Either an array of invoice XML representation and
 *   its signed copy, or FALSE on operation failure.
 *
 * @todo
 *   Move to API module as a UC API Helper.
 */
function _uc_paypaad_prepare(&$order) {
  // Partially check requirements.
  if (!is_object($order)) {
    return FALSE;
  }

  // Set base path for response page.
  global $base_root;
  $response_path = $base_root . url('cart/paypaad');
  // Build content array out of the $order.
  $content = array(
    'items' => array(),
    'invoice_number' => $order->order_id,
    'buyer_tel' => $order->billing_phone,
    // 32-bit machines' signed integer range is up to 2147483647,
    // and it's pretty enough for Iran online transactions.
    'total_amount'   => (int) $order->order_total,
    'merchant_code'  => paypaad_settings('merchant', 'uc'),
    'terminal_code'  => paypaad_settings('terminal', 'uc'),
    'delivery_days'  => paypaad_settings('delivery_days', 'uc', 1),
    'redirect_address' => $response_path . '/success',
    'referer_address'  => $response_path . '/failure',
    'buyer_name' => $order->billing_first_name . ' ' . $order->billing_last_name,
    'delivery_address' => check_plain(str_ireplace('<br />', ' - ', uc_order_address($order, 'billing'))),
  );
  // Build items (products) array.
  $number = 0;
  foreach ($order->products as $product) {
    $content['items'][] = array(
      'number' => ++$number,
      'count' => $product->qty,
      'content' => $product->title,
      'fee' => (int) $product->price,
      'amount' => intval($product->qty) * intval($product->price),
      'description' => isset($product->description) ? $product->description : '-',
    );
  }

  // Append discount, taxes & shipping quote to transaction items.
  foreach ($order->line_items as $item) {
    // Skip subtotal items, also zero valued amounts.
    if ($item['type'] == 'subtotal' || $item['type'] == 'tax_subtotal' || !intval($item['amount'])) {
      continue;
    }
    // Append others as transaction items.
    $content['items'][] = array(
      'fee' => (int) $item['amount'],
      'count' => 1,
      'number' => ++$number,
      'content' => $item['title'],
      'amount' => (int) $item['amount'],
      'description' => isset($item->description) ? $item->description : '-',
    );
  }
  unset($number);

  // Also build the XML representation.
  if ($content = paypaad_xml($content, array(), TRUE)) {
    // Then the signature. "file://" make openssl_pkey_get_private() understand that it's a path.
    if ($sign = paypaad_sign($content, 'file://' . paypaad_settings('key_private', 'uc'))) {
      // Return an array of content & signature.
      return array($content, $sign);
    }
  }
  // Failure.
  return FALSE;
}

